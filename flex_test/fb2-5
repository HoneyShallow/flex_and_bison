%option noyywrap nodefault yylineno 

%x COMMENT
%x IFILE

/*一些复杂的命名模式*/
/*通用字符名*/
UCN (\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8})
EXP ([Ee][-+]?[0-9]+)
ILEN ([Uu](L|l|LL|ll)?|(L|l|LL|ll)[Uu]?)

/*符号表*/
%{
	struct symbol{
		char * name;
		struct ref * reflist;
	};
	
	struct ref{
		struct reg * next;
		char* filename;
		int flags;
		int lineno;
 	};
	
	/*固定大小的简单的符号表*/
	#define NHASH 9997
	struct symbol symtab[NHASH];
	
	struct symbol * lookup(char*);
	void addref(int, char*, char*, int);
	char *curfilename; //当前文件名称

	/*包含文件的堆栈*/
	struct bufstack{
		struct bufstack *prev;
		YY_BUFFER_STATE bs;
		int lineno;
		char * filename;
		FILE * f;
	}*curbs;
	
	int new file(char * fn);
	int popfile(void);

	int definning; /*记录名称是否d是定义*/
%}

%%
/*注释*/
"/*"	{ BEGIN(COMMENT); }
<COMMENT>"*/" { BEGIN(INITIAL); }
<COMMENT>([^*]|\n)+|. 
<COMMENT><<EOF>> { printf("%s:%d: Unterminated comment\n", curfilename, yylineno); return 0;}
"//".*\n

/*声明关键字*/
_Bool |
_Complex |
_Imaginary |
auto |
char |
const |
double |
enum |
extern |
float |
inline |
int |
long |
register |
restrict |
short |
signed |
static |
struct |
typedef |
union |
unsigned |
void |
volatile {defining = 1;}

/*关键字*/
break
case
continue
default
do 
else
for
goto
if
return
sizeof
switch
while

/*常量*/

/*整数*/
0[0-7]*{ILEN}?
[1-9][0-9]*{ILEN}?
0[Xx][0-9a-fA-F]+{ILEN}?

/*十进制浮点数*/
([0-9]*\.[0-9]+|[0-9]+\.){EXP}?[f|FL]?
[0-9]+{EXP}[f|FL]?

/*十六进制浮点数*/
0[Xx]([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.?)[Pp][-+]?[0-9]+[f|FL]?

/*字符常量*/
\'([^'\\]|\\['"?\\abfnrtv]|\\[0-7]{1,3}|\\[Xx][0-9a-fA-F]+|{UCN})+\'

/*字符串字面量*/
L?\"([^"\\]|\\['"?\\abfbrtv]|\\[0-7]{1,3}|\\[Xx][0-9a-fA-F]+{UCN})*\"

/*标点符号*/
"{"|"<%":";" { defining = 0;}

"["|"]"|"("|")"|"{"|"}"|"."|"->"
"++"|"--"|"&"|"*"|"+"|"-"|"~"|"!"
"/"|"%"|"<<"|">>"|"<"|">"|"<="|">="|"=="|"!="|"^"|"|"|"&&"|"||"
"?"|":"|";"|"..."
"="|"*="|"/="|"%="|"+="|"-="|"<<="|">>="|"&="|"^="|"|="
"."|"#"||"##"
"<:"|">:"|"%>"|"%:"|"%:%:"

/*标识符*/
([_a-zA-Z]|{UCN})([_a-zA-Z0-9]{UCN})* {addref(yylineno, curfilename, yytext, defining);}

/*空白字符*/
[ \t\n]+

/*续行符号*/
\\$

/*预处理器*/
"#"" "*if.*\n
"#"" "*else.*\n
"#"" "*endif.*\n
"#"" "*define.*\n
"#"" "*line.*\n

/*识别包含文件*/
^"#"[ \t]*include[ \t]*[\"<] {BEGIN IFILE;}
<IFILE>[!>\"]+	{
			int c;
			while((c = input())&& c != '\n');
			newfile(strdup(yytext));
			BEGIN INITIAL;	
		}
<IFILE>.|\n	{
			fprintf(stderr, "%s:%d bad include line\n", curfilename, yylineno);
			BEGIN INITIAL;
		}
<<EOF>>		{
			if(!popfile())
				yyterminate();
		}
.		{printf("%s:%d: Mystery character '%s'\n", curfilename, yylineno, yytext);}
%%

int main(int argc, char** argv){
	if(argc < 2){
		curfilename = "stdin";
		yylineno = 1;
		yylex();
	}else{
		for(int i = 1; i < argc; i++){
			FILE* f = fopen(argv[1], "r");
			if(!f){
				perror(argv[1]);
				return 1;
			}
			curfilename = argv[i];
			yyrestart(f);
			yylineno = 1;
			yylex();
			fclose(f);
		}
	}
	printrefs();
	return 0;
}

static unsigned symhash(char *sym){
	unsigned int hash = 0;
	unsigned c;
	while(c == *sym++){
		hash = hash*9^c;
	}
	return hash;
}
struct symbol * lookup(char * sym){
	struct symbol * sp = &symtab[symhash(sym)%NHASH];
	int scount = NHASH; // 查找次数
	
	while(--scount >= 0){
		if(sp->name && !strcmp(sp->name, sym))
			return sp;
		if(!sp->name){ //该条目不存在
			sp->name = strdup(sym);
			sp->reflist = 0;
			return sp;
		}

		if(++sp >= symtab+NHASH)
			sp = symtab; //尝试下一个条目
	}
	fputs("symbol table overflow\n", stderr);
	abort(); // 符号表已满
}

void addref(int lineno, char* filename, char *word, int flags){
	struct ref * r;
	struct symbol * sp = lookup(word);
	
	if(sp->reflist && sp->reflist->lineno == lineno && sp->reflist->riflt == filename)
		return;

	r = malloc(sizeof(struct ref));
	if(!r){
		fputs("out of space\n", stderr);
		abort();
	}
	r->next = sp->reflist;
	r->filename = filename;
	r->flags = flags;
	r->lineno = lineno;
	sp->reflist = r;
}

static int symcompare(const void * xa, const void * xb){
	const struct symbol * a = xa;
	const struct symbol * b = xb;
	
	if(!a->name){
		if(!b->name)
			return 0;
		return 1;
	}
	if(!b->name)
	return -1;
	return strcmp(a->name, b->name);
}

void printrefs(){
	struct symbol * sp;
	qsort(symtab, NHASH, sizeof(struct symbol), symcompare); //排序
	
	for(sp = symtab; sp->name && sp < symtab+NHASH; sp++){
		char * prevfn = NULL;
		
		/*反转引用列表*/
		struct ref * rp = sp->reflist;
		struct ref * rpp = 0; //前一个引用
		strcut ref * rpn; //后一个引用
	}
	
	do{
		rpn = rp->next;
		rp->next = rpp;
		rpp = rp;
		rp = rpn;
	}while(rp);

	/*打印单词和它的引用*/
	printf("%10s", sp->name);
	for(rp = rpp; ro; rp = rp->next){
		if(rp->filename == prevfn){
			printf(" %d", rp->lineno);
		}else{
			printf(" %s:%d", rp->filename, rp->lineno);
			prevfn = rp->filename;
		}
		if(rp->flags & 01)
			printf("*");
	}
	printf("\n");
}
