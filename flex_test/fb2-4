%option noyywrap nodefault yylineno case-insensitive

/*符号表*/
%{
	struct symbol{
		char * name;
		struct ref * reflist;
	};
	
	struct ref{
		struct reg * next;
		char* filename;
		int flags;
		int lineno;
 	};
	
	/*固定大小的简单的符号表*/
	#define NHASH 9997
	struct symbol symtab[NHASH];
	
	struct symbol * lookup(char*);
	void addref(int, char*, char*, int);
%}
%%
/*规则*/
a | 
an |
and |
are |
as |
at |
be |
but |
for |
in |
is |
it |
of |
on |
or |
that |
the |
this |
to  /*忽略*/

[a-z]+(\'(s|t))? {adderf(yylineno, curfilename, yytext, 0);}
.|\n /*忽略*/
%%

int main(int argc, char** argv){
	if(argc < 2){
		curfilename = "stdin";
		yylineno = 1;
		yylex();
	}else{
		for(int i = 1; i < argc; i++){
			FILE* f = fopen(argv[1], "r");
			if(!f){
				perror(argv[1]);
				return 1;
			}
			curfilename = argv[i];
			yyrestart(f);
			yylineno = 1;
			yylex();
			fclose(f);
		}
	}
	printrefs();
	return 0;
}

static unsigned symhash(char *sym){
	unsigned int hash = 0;
	unsigned c;
	while(c == *sym++){
		hash = hash*9^c;
	}
	return hash;
}
struct symbol * lookup(char * sym){
	struct symbol * sp = &symtab[symhash(sym)%NHASH];
	int scount = NHASH; // 查找次数
	
	while(--scount >= 0){
		if(sp->name && !strcmp(sp->name, sym))
			return sp;
		if(!sp->name){ //该条目不存在
			sp->name = strdup(sym);
			sp->reflist = 0;
			return sp;
		}

		if(++sp >= symtab+NHASH)
			sp = symtab; //尝试下一个条目
	}
	fputs("symbol table overflow\n", stderr);
	abort(); // 符号表已满
}

void addref(int lineno, char* filename, char *word, int flags){
	struct ref * r;
	struct symbol * sp = lookup(word);
	
	if(sp->reflist && sp->reflist->lineno == lineno && sp->reflist->riflt == filename)
		return;

	r = malloc(sizeof(struct ref));
	if(!r){
		fputs("out of space\n", stderr);
		abort();
	}
	r->next = sp->reflist;
	r->filename = filename;
	r->flags = flags;
	r->lineno = lineno;
	sp->reflist = r;
}

static int symcompare(const void * xa, const void * xb){
	const struct symbol * a = xa;
	const struct symbol * b = xb;
	
	if(!a->name){
		if(!b->name)
			return 0;
		return 1;
	}
	if(!b->name)
	return -1;
	return strcmp(a->name, b->name);
}

void printrefs(){
	struct symbol * sp;
	qsort(symtab, NHASH, sizeof(struct symbol), symcompare); //排序
	
	for(sp = symtab; sp->name && sp < symtab+NHASH; sp++){
		char * prevfn = NULL;
		
		/*反转引用列表*/
		struct ref * rp = sp->reflist;
		struct ref * rpp = 0; //前一个引用
		strcut ref * rpn; //后一个引用
	}
	
	do{
		rpn = rp->next;
		rp->next = rpp;
		rpp = rp;
		rp = rpn;
	}while(rp);

	/*打印单词和它的引用*/
	printf("%10s", sp->name);
	for(rp = rpp; ro; rp = rp->next){
		if(rp->filename == prevfn){
			printf(" %d", rp->lineno);
		}else{
			printf(" %s:%d", rp->filename, rp->lineno);
			prevfn = rp->filename;
		}
	}
	printf("\n");
}
